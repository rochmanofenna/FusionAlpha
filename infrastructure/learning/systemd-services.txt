SYSTEMD SERVICES - LINUX SERVICE MANAGEMENT

WHAT IS SYSTEMD?
================
SystemD is the init system and service manager for modern Linux distributions like RHEL 8+, 
CentOS 8+, Ubuntu 16.04+, and most others. It replaces older init systems like SysV init.

KEY CONCEPTS:
=============

1. UNITS - The basic objects that systemd manages
   - Services (.service) - Background daemons/processes
   - Targets (.target) - Groups of units (like runlevels)
   - Mounts (.mount) - Filesystem mount points
   - Timers (.timer) - Scheduled tasks (cron replacement)

2. SERVICE FILES - Configuration files that define how services run
   - Located in: /etc/systemd/system/ (custom) or /usr/lib/systemd/system/ (packaged)
   - INI-style format with sections: [Unit], [Service], [Install]

3. SERVICE STATES:
   - inactive - Not running
   - active (running) - Currently running
   - active (exited) - One-time task completed successfully
   - failed - Crashed or exited with error
   - activating - Starting up
   - deactivating - Shutting down

REAL-WORLD APPLICATIONS:
=======================

1. HIGH-PERFORMANCE COMPUTING:
   - Run ML/AI training jobs as services
   - Automatic restart on crashes
   - Resource limits to prevent system overload
   - GPU resource management

2. PRODUCTION ENVIRONMENTS:
   - Web services (nginx, apache)
   - Databases (postgresql, mysql)
   - Application servers
   - Microservices

3. FINANCIAL/TRADING SYSTEMS:
   - Market data feeds
   - Trading algorithms
   - Risk management systems
   - Real-time analytics

BICEP SERVICE BREAKDOWN:
=======================

[Unit] Section:
- Description: Human-readable service description
- After: Services this must start after
- Wants: Soft dependencies (won't fail if missing)
- Requires: Hard dependencies (will fail if missing)

[Service] Section:
- Type=simple: Process doesn't fork/daemonize
- User/Group: Security - run as specific user
- WorkingDirectory: Where service runs from
- Environment: Set environment variables
- ExecStart: Main command to run
- ExecStop: How to stop gracefully
- Restart: Restart policy (always, on-failure, no)

[Install] Section:
- WantedBy: When to start (multi-user.target = normal boot)
- Alias: Alternative names for the service

SECURITY FEATURES:
=================
- NoNewPrivileges: Prevents privilege escalation
- PrivateTmp: Isolates /tmp directory
- ProtectHome: Blocks access to user home directories
- ProtectSystem: Read-only system directories
- ReadWritePaths: Explicitly allow write access to specific paths

RESOURCE LIMITS:
===============
- MemoryLimit: RAM usage limit
- CPUQuota: CPU usage percentage (100% = 1 core)
- TasksMax: Maximum number of tasks/threads
- LimitNOFILE: File descriptor limit

COMMON SYSTEMCTL COMMANDS:
=========================
sudo systemctl start bicep-service      # Start service
sudo systemctl stop bicep-service       # Stop service
sudo systemctl restart bicep-service    # Restart service
sudo systemctl reload bicep-service     # Reload config (if supported)
sudo systemctl enable bicep-service     # Start on boot
sudo systemctl disable bicep-service    # Don't start on boot
sudo systemctl status bicep-service     # Check status
sudo systemctl logs bicep-service       # View logs
sudo systemctl daemon-reload            # Reload systemd config

PRODUCTION CHECKLIST:
====================
✓ Service runs as non-root user
✓ Resource limits configured
✓ Security restrictions enabled
✓ Proper logging configured
✓ Health checks implemented
✓ Graceful shutdown handling
✓ Restart policy defined
✓ Dependencies specified

WHY THIS MATTERS FOR YOUR RESUME:
=================================
- Shows Linux system administration skills
- Demonstrates production deployment experience
- Security-conscious configuration
- Resource management understanding
- Service reliability and monitoring
- Enterprise-level system design